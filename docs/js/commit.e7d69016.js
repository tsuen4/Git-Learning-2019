(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["commit"],{"0070":function(t,n,e){"use strict";var r=e("396a"),a=e.n(r);a.a},"396a":function(t,n,e){},"4e7d":function(t,n,e){t.exports=e.p+"img/git_commit_flow.af384921.png"},5623:function(t,n,e){"use strict";var r=e("dadd"),a=e("98c1"),s=e("2877"),l=Object(s["a"])(a["default"],r["a"],r["b"],!1,null,null,null);n["default"]=l.exports},"7ad4":function(t,n,e){"use strict";var r=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{attrs:{id:"terminal-box"}},[t._v("ターミナル予定地")])},a=[],s={},l=s,o=(e("0070"),e("2877")),c=Object(o["a"])(l,r,a,!1,null,null,null);n["a"]=c.exports},"98c1":function(t,n,e){"use strict";var r=e("b441"),a=e.n(r);n["default"]=a.a},b441:function(t,n){t.exports={source:"# 変更内容の記録\r\n\r\nリポジトリ内の各ファイルには、 Git から追跡されているもの(tracked)と追跡されていないもの(untracked)の2通りがあります。追跡されているものの中には「変更されていない(unmodified)」「変更済み(modified)」「ステージされている(staged)」の3つの状態があります。\r\n\r\nファイルの変更を Git で記録することで、追従対象に置くことができます。\r\n\r\n![commit_flow](@/assets/text/img/git_commit_flow.png)\r\n\r\n## 問題\r\n\r\n前回作成したリポジトリの中に新しくファイルを作ってみましょう。今回はコマンドで簡単に生成します。\r\n\r\n```bash\r\necho &quot;hello&quot; &gt; hello.txt # hello という出力を hello.txt に書き込む\r\ncat hello.txt # hello.txt の確認\r\n```\r\n\r\nレポジトリの状態を確認してみましょう。\r\n\r\n```bash\r\ngit status\r\n```\r\n\r\n今までのリポジトリの記録に存在していなかったファイルなので、未追従(Untracked)として表示されます。\r\n\r\n作成・変更したファイルを Git に記録する準備として、ステージングエリアに登録してみましょう。\r\n\r\n```bash\r\ngit add hello.txt # hello.txt をステージングエリアに追加\r\n```\r\n\r\nステージングエリアに追加後、 `git status` コマンドでは「Changes to be committed (コミットされる変更)」として表示されます。\r\n\r\nそれでは、ステージングエリアに登録されているファイルをコミットで記録してみましょう。 `-m` オプションは、コマンドライン上でコミットメッセージを入力するためのオプションです。\r\n\r\n```bash\r\ngit commit -m &quot;はじめてのコミット&quot; # &quot;はじめてのコミット&quot; というメッセージをつけてコミット\r\n```\r\n\r\nコミットの履歴を確認するには以下のコマンドを使用します。コミット時に指定したコメントが表示されていたら成功です！\r\n\r\n```bash\r\ngit log\r\n```\r\n\r\n`git log` で画面に収まらない量のログが表示された場合、`q キー` でログの画面から抜け出せます。また、 `j キー` で下方向へ、 `k キー` で上方向へスクロールできます。\r\n"}},dadd:function(t,n,e){"use strict";var r=function(){var t=this,n=t.$createElement;t._self._c;return t._m(0)},a=[function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("div",{staticClass:"commit"},[r("h1",[t._v("変更内容の記録")]),r("p",[t._v("リポジトリ内の各ファイルには、 Git から追跡されているもの(tracked)と追跡されていないもの(untracked)の2通りがあります。追跡されているものの中には「変更されていない(unmodified)」「変更済み(modified)」「ステージされている(staged)」の3つの状態があります。")]),r("p",[t._v("ファイルの変更を Git で記録することで、追従対象に置くことができます。")]),r("p",[r("img",{attrs:{src:e("4e7d"),alt:"commit_flow"}})]),r("h2",[t._v("問題")]),r("p",[t._v("前回作成したリポジトリの中に新しくファイルを作ってみましょう。今回はコマンドで簡単に生成します。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{class:"language-bash"}},[r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("echo")]),t._v(" "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"hello"')]),t._v(" > hello.txt "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# hello という出力を hello.txt に書き込む")]),t._v("\ncat hello.txt "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# hello.txt の確認")]),t._v("\n")])]),r("p",[t._v("レポジトリの状態を確認してみましょう。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("git status\n")])]),r("p",[t._v("今までのリポジトリの記録に存在していなかったファイルなので、未追従(Untracked)として表示されます。")]),r("p",[t._v("作成・変更したファイルを Git に記録する準備として、ステージングエリアに登録してみましょう。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("git add hello.txt "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# hello.txt をステージングエリアに追加")]),t._v("\n")])]),r("p",[t._v("ステージングエリアに追加後、 "),r("code",[t._v("git status")]),t._v(" コマンドでは「Changes to be committed (コミットされる変更)」として表示されます。")]),r("p",[t._v("それでは、ステージングエリアに登録されているファイルをコミットで記録してみましょう。 "),r("code",[t._v("-m")]),t._v(" オプションは、コマンドライン上でコミットメッセージを入力するためのオプションです。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("git commit -m "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"はじめてのコミット"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v('# "はじめてのコミット" というメッセージをつけてコミット')]),t._v("\n")])]),r("p",[t._v("コミットの履歴を確認するには以下のコマンドを使用します。コミット時に指定したコメントが表示されていたら成功です！")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("git "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("log")]),t._v("\n")])]),r("p",[r("code",[t._v("git log")]),t._v(" で画面に収まらない量のログが表示された場合、"),r("code",[t._v("q キー")]),t._v(" でログの画面から抜け出せます。また、 "),r("code",[t._v("j キー")]),t._v(" で下方向へ、 "),r("code",[t._v("k キー")]),t._v(" で上方向へスクロールできます。")])])}];e.d(n,"a",function(){return r}),e.d(n,"b",function(){return a})},efe7:function(t,n,e){"use strict";e.r(n);var r=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{attrs:{id:"git-text"}},[e("md",{staticClass:"markdown-body"}),e("TerminalBlock")],1)},a=[],s=e("5623"),l=e("7ad4"),o={components:{md:s["default"],TerminalBlock:l["a"]}},c=o,i=e("2877"),u=Object(i["a"])(c,r,a,!1,null,null,null);n["default"]=u.exports}}]);
//# sourceMappingURL=commit.e7d69016.js.map